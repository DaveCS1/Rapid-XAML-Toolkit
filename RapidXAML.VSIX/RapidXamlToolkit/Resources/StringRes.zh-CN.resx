<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Info_IntializingCommands" xml:space="preserve">
    <value>初始化命令(v{0})</value>
    <comment>Info mesage when package initialized</comment>
  </data>
  <data name="Options_AllInOneProject" xml:space="preserve">
    <value>视图和 ViewModel 位于同一个项目中</value>
  </data>
  <data name="Options_AllInOneProjectDescription" xml:space="preserve">
    <value>指示 ViewModel 和视图(XAML 文件)位于同一个项目中。</value>
  </data>
  <data name="Options_ButtonAdd" xml:space="preserve">
    <value>添加</value>
  </data>
  <data name="Options_ButtonCopy" xml:space="preserve">
    <value>复制</value>
  </data>
  <data name="Options_ButtonDelete" xml:space="preserve">
    <value>删除</value>
  </data>
  <data name="Options_ButtonEdit" xml:space="preserve">
    <value>编辑</value>
  </data>
  <data name="Options_ButtonImport" xml:space="preserve">
    <value>导入</value>
  </data>
  <data name="Options_ButtonNew" xml:space="preserve">
    <value>新建</value>
  </data>
  <data name="Options_ButtonOk" xml:space="preserve">
    <value>确定</value>
  </data>
  <data name="Options_ButtonReset" xml:space="preserve">
    <value>重置</value>
  </data>
  <data name="Options_ButtonSetAsActive" xml:space="preserve">
    <value>设为活动</value>
  </data>
  <data name="Options_ClassGrouping" xml:space="preserve">
    <value>类分组</value>
  </data>
  <data name="Options_ClassGroupingDescription" xml:space="preserve">
    <value>用于封装在为类创建 XAML 时为每个属性创建的元素的元素。</value>
  </data>
  <data name="Options_CodeBehindConstructorContent" xml:space="preserve">
    <value>Code-behind 构造函数内容</value>
  </data>
  <data name="Options_CodeBehindConstructorContentDescription" xml:space="preserve">
    <value>应在设置数据上下文时添加到代码隐藏文件的构造函数的代码。</value>
  </data>
  <data name="Options_CodeBehindPageContent" xml:space="preserve">
    <value>Code-behind 页面内容</value>
  </data>
  <data name="Options_CodeBehindPageContentDescription" xml:space="preserve">
    <value>应在设置数据上下文时添加到构造函数外部的 code-behind 文件的代码。</value>
  </data>
  <data name="Options_CodeBehindPlaceholder" xml:space="preserve">
    <value>Code-behind 文件默认内容</value>
  </data>
  <data name="Options_CodeBehindPlaceholderDescription" xml:space="preserve">
    <value>创建 code-behind 文件时的默认文件内容。</value>
  </data>
  <data name="Options_DataContextHeader" xml:space="preserve">
    <value>数据上下文</value>
  </data>
  <data name="Options_DefaultCodeBehindConstructor" xml:space="preserve">
    <value>默认 code-behind 构造函数</value>
  </data>
  <data name="Options_DefaultCodeBehindConstructorDescription" xml:space="preserve">
    <value>将添加的 code-behind 文件的构造函数(在需要使用却没有的情况下)。</value>
  </data>
  <data name="Options_EnableExtendedLogging" xml:space="preserve">
    <value>启用扩展日志记录</value>
  </data>
  <data name="Options_EnumMappingOutput" xml:space="preserve">
    <value>枚举输出</value>
  </data>
  <data name="Options_EnumMappingOutputDescription" xml:space="preserve">
    <value>用于枚举的每个元素的输出。</value>
  </data>
  <data name="Options_FallbackOutput" xml:space="preserve">
    <value>回退输出</value>
  </data>
  <data name="Options_FallbackOutputDescription" xml:space="preserve">
    <value>在无法应用任何特定映射时，用于属性的输出。</value>
  </data>
  <data name="Options_GeneralSettingsHeader" xml:space="preserve">
    <value>常规设置</value>
  </data>
  <data name="Options_MappingIfReadOnly" xml:space="preserve">
    <value>仅在只读时</value>
  </data>
  <data name="Options_MappingIfReadOnlyDescription" xml:space="preserve">
    <value>仅在属性具有公共 setter 时应用映射。</value>
  </data>
  <data name="Options_MappingNameFilter" xml:space="preserve">
    <value>名称筛选器</value>
  </data>
  <data name="Options_MappingNameFilterDescription" xml:space="preserve">
    <value>要匹配的属性的部分名称。可用竖线(|)字符将多个值分隔开来指定这些值。</value>
  </data>
  <data name="Options_MappingOutput" xml:space="preserve">
    <value>输出</value>
  </data>
  <data name="Options_MappingOutputDescription" xml:space="preserve">
    <value>应在使用此映射时生成的输出。</value>
  </data>
  <data name="Options_MappingsHeader" xml:space="preserve">
    <value>映射</value>
  </data>
  <data name="Options_MappingType" xml:space="preserve">
    <value>类型</value>
  </data>
  <data name="Options_MappingTypeDescription" xml:space="preserve">
    <value>要匹配的属性的类型。可用竖线(|)字符将多个值分隔开来指定这些值。</value>
  </data>
  <data name="Options_NamingHeader" xml:space="preserve">
    <value>命名</value>
  </data>
  <data name="Options_NamingVisualizer" xml:space="preserve">
    <value>可视化解决方案结构</value>
  </data>
  <data name="Options_ProfileName" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="Options_ProfilePageTitle" xml:space="preserve">
    <value>快速 XAML 工具包 - 编辑配置文件</value>
  </data>
  <data name="Options_ProfilesSectionHeader" xml:space="preserve">
    <value>配置文件:</value>
  </data>
  <data name="Options_StructureAndNamingHeader" xml:space="preserve">
    <value>结构和命名</value>
  </data>
  <data name="Options_StrucutreHeader" xml:space="preserve">
    <value>项目结构</value>
  </data>
  <data name="Options_SubPropertyOutput" xml:space="preserve">
    <value>子属性输出</value>
  </data>
  <data name="Options_SubPropertyOutputDescription" xml:space="preserve">
    <value>用于泛型类型的每个属性的输出。</value>
  </data>
  <data name="Options_TemporaryUiNotice" xml:space="preserve">
    <value>此 UI 是临时的，在发布前将发生更改</value>
  </data>
  <data name="Options_ViewModelDirectoryName" xml:space="preserve">
    <value>ViewModel 目录名</value>
  </data>
  <data name="Options_ViewModelDirectoryNameDescription" xml:space="preserve">
    <value>包含 ViewModel 的文件夹的名称。</value>
  </data>
  <data name="Options_ViewModelFileSuffix" xml:space="preserve">
    <value>ViewModel 文件后缀</value>
  </data>
  <data name="Options_ViewModelFileSuffixDescription" xml:space="preserve">
    <value>附加到每个 ViewModel 的名称末尾的文本。</value>
  </data>
  <data name="Options_ViewModelProjectSuffix" xml:space="preserve">
    <value>ViewModel 项目后缀</value>
  </data>
  <data name="Options_ViewModelProjectSuffixDescription" xml:space="preserve">
    <value>包含 ViewModel 的项目的名称末尾的文本。</value>
  </data>
  <data name="Options_XamlFileDirectoryName" xml:space="preserve">
    <value>XAML 文件目录名</value>
  </data>
  <data name="Options_XamlFileDirectoryNameDescription" xml:space="preserve">
    <value>包含视图(XAML 文件)的文件夹的名称。</value>
  </data>
  <data name="Options_XamlFileSuffix" xml:space="preserve">
    <value>XAML 文件后缀</value>
  </data>
  <data name="Options_XamlFileSuffixDescription" xml:space="preserve">
    <value>附加到每个视图(XAML 文件)的名称末尾的文本。</value>
  </data>
  <data name="Options_XamlPageAttribute" xml:space="preserve">
    <value>XAMLPage 属性</value>
  </data>
  <data name="Options_XamlPageAttributeDescription" xml:space="preserve">
    <value>应在设置数据上下文时添加到顶层 XAMLelement 的属性。</value>
  </data>
  <data name="Options_XamlPlaceholder" xml:space="preserve">
    <value>XAML 文件默认内容</value>
  </data>
  <data name="Options_XamlPlaceholderDescription" xml:space="preserve">
    <value>创建新的 XAML 文件时的默认文件内容。</value>
  </data>
  <data name="Options_XamlProjectSuffix" xml:space="preserve">
    <value>XAML 项目后缀</value>
  </data>
  <data name="Options_XamlProjectSuffixDescription" xml:space="preserve">
    <value>包含视图(XAML 文件)的项目的名称末尾的文本。</value>
  </data>
  <data name="Options_ButtonExport" xml:space="preserve">
    <value>导出</value>
  </data>
  <data name="Error_UnableToFindProjectInSolution" xml:space="preserve">
    <value>在解决方案中找不到项目“{0}”。</value>
  </data>
  <data name="Info_AddedRowDefsCount" xml:space="preserve">
    <value>正在添加 {0} 个行定义。</value>
  </data>
  <data name="Info_AddedXamlToToolbox" xml:space="preserve">
    <value>已将 XAML 添加到 {0} 的工具箱</value>
  </data>
  <data name="Info_AddingColDefsToGrid" xml:space="preserve">
    <value>正在将 ColumnDefinition 添加到网格。</value>
  </data>
  <data name="Info_AddingGridToOutput" xml:space="preserve">
    <value>正在将网格添加到输出。</value>
  </data>
  <data name="Info_AddingPropertyToOutput" xml:space="preserve">
    <value>正在将“{0}”添加到输出。</value>
  </data>
  <data name="Info_AnalyzingCSharpCode" xml:space="preserve">
    <value>正在分析 C# 代码。(v{0})</value>
  </data>
  <data name="Info_AnalyzingVisualBasicCode" xml:space="preserve">
    <value>正在分析 VB 代码。(v{0})</value>
  </data>
  <data name="Info_AttemptingoAddToToolbox" xml:space="preserve">
    <value>正在尝试将 XAML 添加到工具箱。</value>
  </data>
  <data name="Info_AttemptingToCopy" xml:space="preserve">
    <value>正在尝试将 XAML 复制到剪贴板。</value>
  </data>
  <data name="Info_AttemptingToCreateView" xml:space="preserve">
    <value>正在尝试创建视图。</value>
  </data>
  <data name="Info_CannotGetPropertiesForKnownType" xml:space="preserve">
    <value>无法获取已知类型“{0}”的子属性。</value>
  </data>
  <data name="Info_ClassNoPublicProperties" xml:space="preserve">
    <value>类不包含公共属性。</value>
  </data>
  <data name="Info_ClassPropertyCount" xml:space="preserve">
    <value>类包含 {0} 属性。</value>
  </data>
  <data name="Info_CopiedXaml" xml:space="preserve">
    <value>已复制 {0} 的 XAML:{1}</value>
  </data>
  <data name="Info_CreatedView" xml:space="preserve">
    <value>创建的文件 {0}</value>
  </data>
  <data name="Info_DocumentPropertyCount" xml:space="preserve">
    <value>文档包含 {0} 属性。</value>
  </data>
  <data name="Info_EnumElementCount" xml:space="preserve">
    <value>已找到枚举的 {0} 个元素。</value>
  </data>
  <data name="Info_FailedToGetNullableType" xml:space="preserve">
    <value>无法获取假定可为 Null 的属性“{0}”的 typeSymbol。</value>
  </data>
  <data name="Info_FileExists" xml:space="preserve">
    <value>文件“{0}”已存在。</value>
  </data>
  <data name="Info_FormattingOutputForGenericType" xml:space="preserve">
    <value>正在格式化泛型类型“{0}”的输出。</value>
  </data>
  <data name="Info_FormattingOutputForNonGenericType" xml:space="preserve">
    <value>正在格式化非泛型类型“{0}”的输出。</value>
  </data>
  <data name="Info_FormattingOutputForProperty" xml:space="preserve">
    <value>正在格式化属性“{0}”的输出。</value>
  </data>
  <data name="Info_FormattingSubpropertiesInsideGrid" xml:space="preserve">
    <value>正在格式化网格中的子属性。</value>
  </data>
  <data name="Info_FoundEnumMapping" xml:space="preserve">
    <value>已找到作为枚举的“{0}”的映射。</value>
  </data>
  <data name="Info_FoundPropertyCount" xml:space="preserve">
    <value>已找到 {0} 子属性。</value>
  </data>
  <data name="Info_FoundSubProperty" xml:space="preserve">
    <value>已找到子属性“{0}”。</value>
  </data>
  <data name="Info_FoundSubPropertyOfUnknownType" xml:space="preserve">
    <value>已找到未知类型的子属性:{0}.</value>
  </data>
  <data name="Info_GetSelectionOutput" xml:space="preserve">
    <value>正在获取所选项的输出。</value>
  </data>
  <data name="Info_GetSingleClassOutput" xml:space="preserve">
    <value>正在获取类的输出。</value>
  </data>
  <data name="Info_GetSingleItemOutput" xml:space="preserve">
    <value>正在获取单个项目的输出。</value>
  </data>
  <data name="Info_GetSinglePropertyOutput" xml:space="preserve">
    <value>正在获取单个属性的输出。</value>
  </data>
  <data name="Info_GettingGenericType" xml:space="preserve">
    <value>正在获取泛型类型。</value>
  </data>
  <data name="Info_GettingSubPropertyOutput" xml:space="preserve">
    <value>正在获取“{0}”的子属性输出。</value>
  </data>
  <data name="Info_IdentifiedPropertySummary" xml:space="preserve">
    <value>已将属性标识为: 名称为“{0}”，类型为“{1}”，IsReadOnly 为“{2}”。</value>
  </data>
  <data name="Info_LookingForReadWriteMappings" xml:space="preserve">
    <value>正在查找不是只读的映射。</value>
  </data>
  <data name="Info_NoEnumMappingFound" xml:space="preserve">
    <value>未找到作为枚举的“{0}”的映射，现在正在按类型名称检查。</value>
  </data>
  <data name="Info_NoMappingFoundUsingFallback" xml:space="preserve">
    <value>未找到映射，因此使用回退输出。</value>
  </data>
  <data name="Info_NoPropertiesToOutput" xml:space="preserve">
    <value>没有提供输出的属性。</value>
  </data>
  <data name="Info_NothingAddedToToolbox" xml:space="preserve">
    <value>未将 XAML 添加到工具箱。</value>
  </data>
  <data name="Info_NothingToCopy" xml:space="preserve">
    <value>没有要复制到剪贴板的内容。</value>
  </data>
  <data name="Info_NotIncludingExcludedProperty" xml:space="preserve">
    <value>未包含属性“{0}”，因为它在排除列表中。</value>
  </data>
  <data name="Info_NotOverwritingFile" xml:space="preserve">
    <value>不覆盖“{0}”。</value>
  </data>
  <data name="Info_NoViewCreated" xml:space="preserve">
    <value>未创建视图。</value>
  </data>
  <data name="Info_NoXamlCopied" xml:space="preserve">
    <value>未复制 XAML。</value>
  </data>
  <data name="Info_OverwritingFile" xml:space="preserve">
    <value>覆盖“{0}”。</value>
  </data>
  <data name="Info_PropertiesInSelectedAreaCount" xml:space="preserve">
    <value>选择区域中的 {0} 属性。</value>
  </data>
  <data name="Info_PropertyIsReadOnly" xml:space="preserve">
    <value>属性是只读的，因此先查找只读映射。</value>
  </data>
  <data name="Info_PropertyTypeHasNoSubProperties" xml:space="preserve">
    <value>“{0}”的类型为“{1}”，它不包含子属性。</value>
  </data>
  <data name="Info_PropertyTypeNotRecognizedAsGeneric" xml:space="preserve">
    <value>“{0}”未识别为泛型。</value>
  </data>
  <data name="Info_ProperyIsNotReadOnly" xml:space="preserve">
    <value>属性不是只读，因此筛选出只读映射。</value>
  </data>
  <data name="Info_ReplacingIncIntPlaceholder" xml:space="preserve">
    <value>替换递增整数占位符。</value>
  </data>
  <data name="Info_ReplacingRepIntPlaceholder" xml:space="preserve">
    <value>替换重复的整数占位符。</value>
  </data>
  <data name="Info_ReturningOutput" xml:space="preserve">
    <value>返回:{0}</value>
  </data>
  <data name="Info_SearchingForMappingWithGenericWildcard" xml:space="preserve">
    <value>在映射中搜索被视为“{0}”的泛型类型。</value>
  </data>
  <data name="Info_SubpropertyCount" xml:space="preserve">
    <value>属性“{0}”具有 {1} 子属性。</value>
  </data>
  <data name="Info_UnableToAccessTelemetry" xml:space="preserve">
    <value>无法加载程序集“Microsoft.VisualStudio.Telemetry”，因此将无法启用遥测。</value>
  </data>
  <data name="Info_UsingClassGrouping" xml:space="preserve">
    <value>使用“{0}”的类分组。</value>
  </data>
  <data name="Prompt_ConfirmDeleteProfileMessage" xml:space="preserve">
    <value>是否确实要删除配置文件“{0}”?</value>
  </data>
  <data name="Prompt_ConfirmDeleteProfileTitle" xml:space="preserve">
    <value>确认删除</value>
  </data>
  <data name="Prompt_ConfirmResetProfilesMessage" xml:space="preserve">
    <value>重置配置文件将导致你丢失所有更改。是否确实要这样做?</value>
  </data>
  <data name="Prompt_ConfirmResetProfilesTitle" xml:space="preserve">
    <value>确认重置</value>
  </data>
  <data name="Prompt_FileExistsTitle" xml:space="preserve">
    <value>文件已存在</value>
  </data>
  <data name="Propt_FileExistsMessage" xml:space="preserve">
    <value>是否要重写现有文件?</value>
  </data>
  <data name="UI_NoPropertiesXaml" xml:space="preserve">
    <value>&lt;!-- 以 XAML 形式复制时没有可访问的属性 --&gt;</value>
  </data>
  <data name="UI_ProfileFilterDescription" xml:space="preserve">
    <value>快速 XAML 配置文件</value>
  </data>
  <data name="UI_SelectionMoreThanThreeNames" xml:space="preserve">
    <value>{0}、{1} 和 {2} 个其他属性</value>
  </data>
  <data name="UI_SelectionThreeNames" xml:space="preserve">
    <value>{0}、{1} 和 1 个其他属性</value>
  </data>
  <data name="UI_SelectionTwoNames" xml:space="preserve">
    <value>{0} 和 {1}</value>
  </data>
  <data name="Package__106" xml:space="preserve">
    <value>快速 XAML 工具包</value>
    <comment>Options group header</comment>
  </data>
  <data name="Package__107" xml:space="preserve">
    <value>配置文件</value>
    <comment>Options section header</comment>
  </data>
  <data name="Package__110" xml:space="preserve">
    <value>快速 XAML 工具包</value>
    <comment>Title for Help/About</comment>
  </data>
  <data name="Package__112" xml:space="preserve">
    <value>用于加快 XAML 应用开发的工具</value>
    <comment>Detailed description for Help/About</comment>
  </data>
  <data name="Prompt_ImportFailedMessage" xml:space="preserve">
    <value>以下问题已阻止导入配置文件:\r\n\r\n- {0}</value>
  </data>
  <data name="Prompt_ImportFailedTitle" xml:space="preserve">
    <value>无法导入配置文件</value>
  </data>
  <data name="UI_AccessingOutputPaneFailed" xml:space="preserve">
    <value>无法获取输出窗口窗格。</value>
  </data>
  <data name="UI_ActiveProfileName" xml:space="preserve">
    <value>{0}    [*活动*]</value>
  </data>
  <data name="UI_CopiedProfileName" xml:space="preserve">
    <value>{0} (复制)</value>
  </data>
  <data name="UI_CreatingOutputPaneFailed" xml:space="preserve">
    <value>无法创建输出窗口窗格。</value>
  </data>
  <data name="UI_NewProfileDefaultName" xml:space="preserve">
    <value>新建</value>
  </data>
  <data name="UI_NoXamlCopiedNoProfilesConfigured" xml:space="preserve">
    <value>未复制 XAML。未配置任何配置文件。</value>
  </data>
  <data name="UI_RxtOutputPaneTitle" xml:space="preserve">
    <value>快速 XAML 工具包</value>
  </data>
  <data name="UI_ToolboxGroupHeader" xml:space="preserve">
    <value>快速 XAML</value>
  </data>
  <data name="VSCT__ContextMenu" xml:space="preserve">
    <value>快速 XAML</value>
    <comment>VS Context menu text</comment>
  </data>
  <data name="VSCT__CopyToClipboardCommandId" xml:space="preserve">
    <value>复制到剪贴板</value>
    <comment>Command button text for when copying to the clipboard as XAML</comment>
  </data>
  <data name="VSCT__CreateViewCommandId" xml:space="preserve">
    <value>创建视图</value>
    <comment>Command button text for when creating a view from the SolutionExplorer</comment>
  </data>
  <data name="VSCT__OpenOptionsCommandId" xml:space="preserve">
    <value>先设置活动配置文件</value>
    <comment>Command button text when there is no active profile set</comment>
  </data>
  <data name="VSCT__SendToToolboxCommandId" xml:space="preserve">
    <value>发送到工具箱</value>
    <comment>Command button text for when sending to the clipboard as XAML</comment>
  </data>
  <data name="VSCT__SetDatacontextCommandId" xml:space="preserve">
    <value>设置数据上下文</value>
    <comment>Command button text for setting the datacontext of a page</comment>
  </data>
  <data name="VSIX__LocalizedDescription" xml:space="preserve">
    <value>用于加快 XAML 应用开发的工具</value>
    <comment>Description used in vsixlangpack</comment>
  </data>
  <data name="VSIX__LocalizedName" xml:space="preserve">
    <value>快速 XAML 工具包</value>
    <comment>Name used in vsixlangpack</comment>
  </data>
</root>